#pragma kernel VisualizeMask

Buffer<float> _InputTensor;
RWTexture2D<float4> _OutputTex;

struct ARG
{
    int index;
    float value;
};

uint2 _OutputSize;
float _Threshold;
float4 _MaskColor;

// Get index of NCHW tensor
uint4 IdxNCHW(uint4 c, uint y, uint x)
{
    return c * _OutputSize.x * _OutputSize.y + y * _OutputSize.x + x;
}

// TODO: Implement mask anti-aliasing
[numthreads(8,8,1)]
void VisualizeMask (uint2 id : SV_DispatchThreadID)
{
    // Flip Y axis to match Unity coordinate
    uint4 tid = IdxNCHW(uint4(0, 1, 2, 3), _OutputSize.y - id.y - 1, id.x);

    float4 mask = float4(
        _InputTensor[tid.x],
        _InputTensor[tid.y],
        _InputTensor[tid.z],
        _InputTensor[tid.w]
    );

    _OutputTex[id] = any(mask >= _Threshold)
        ? _MaskColor
        : float4(0.0, 0.0, 0.0, 0.0);
}
